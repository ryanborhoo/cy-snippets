{
  "Cypress Test Project Template": {
    "prefix": "!cyProject",
    "body": [
      "describe('This is your test project title$1', () => {",
      "before(() => {",
      "// runs once before all tests",
      "})",
      "beforeEach(() => {",
      "// runs before every it() test block",
      "})",
      "afterEach(() => {",
      "// runs after every it() test block",
      "})",
      "after(() => {",
      "// runs once after all tests",
      "})",
      "context('This is your test suite title', () => {",
      "// -- Start: Cypress Tests --",
      "it('This is your test case one title', () => {",
      "// Write your test case one here",
      "})",
      "it('This is your test case two title', () => {",
      "// Write your test case two here",
      "})",
      "})",
      "})"
    ],
    "description": "Cypress Test Project Template"
  },

  "Cypress Test Suite Template": {
    "prefix": "!cySuite",
    "body": [
      "context('This is your test suite title'$1, () => {",
      "before(() => {",
      "// runs once before all tests",
      "})",
      "beforeEach(() => {",
      "// runs before every it() test block",
      "})",
      "afterEach(() => {",
      "// runs after every it() test block",
      "})",
      "after(() => {",
      "// runs once after all tests",
      "})",
      "// -- Start: Cypress Tests --",
      "it('This is your test case one title', () => {",
      "// Write your test case one here",
      "})",
      "it('This is your test case two title', () => {",
      "// Write your test case two here",
      "})",
      "})"
    ],
    "description": "Cypress Test Suite Template"
  },

  "Cypress Test Template": {
    "prefix": "!cyTest",
    "body": [
      "it('This is your test case title'$1, () => {",
      "// Write your test case here",
      "})"
    ],
    "description": "Cypress Test Template"
  },

  "Cypress API Calls": {
    "prefix": "!cyAPI",
    "body": [
      "cy.request({",
      "\tmethod: \"$1\",",
      "\turl: \"\",",
      "\theaders: { \"Accept-Language\": \"en-us\" },",
      "});"
    ],
    "description": "Cypress API Calls"
  },

  "Cypress Add Command": {
    "prefix": "!cyComm",
    "body": [
      "Cypress.Commands.add('Command name here'$1, () => {",
      "// Write your command here",
      "});"
    ],
    "description": "Cypress Add Command"
  },

  "Cypress Ignore Text Case": {
    "prefix": "!cyNoCase",
    "body": ["$1{ matchCase: false }"],
    "description": "Cypress Ignore Text Case"
  },

  "Cypress Check Element Visible": {
    "prefix": "!cyVisiable",
    "body": ["$1should('be.visible')"],
    "description": "Cypress Check Element Visible"
  },

  "Cypress Find Element By Attribute": {
    "prefix": "!cyAttr",
    "body": ["$1should('have.attr', 'attributeName', 'attributeVale')"],
    "description": "Cypress Find Element By Attribute"
  }
}
